{
  // Place your micro-frontend workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // "rjs": {
  //   "prefix": "rjs",
  //   "description": "Zustand Store (TS)",
  //   "body": [
  //     "import create, { GetState, SetState } from 'zustand';",
  //     "import createStoreSelectors from './utils/createStoreSelector';",
  //     "",
  //     "export type $1StoreType = {",
  //     "// State & action type definitions",
  //     "};",
  //     "",
  //     "export const store = create<$1StoreType>(",
  //     "(",
  //     "set: SetState<$1StoreType>,",
  //     "get: GetState<$1StoreType>",
  //     ") => ({",
  //     "// State & actions",
  //     "})",
  //     ");",
  //     "",
  //     "const use$1 = createStoreSelectors(store);",
  //     "",
  //     "const use$1Store = () => {",
  //     "return {",
	//   "// Selectors for state & actions",
  //     "// state: use$1.use.state(),",
  //     "// setState: use$1.use.setState()",
  //     "};",
  //     "};",
  //     "",
  //     "export { use$1, use$1Store };"
  //   ]
  // }
}
